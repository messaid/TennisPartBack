// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisPartCore.Models;

namespace TennisPartCore.Migrations
{
    [DbContext(typeof(TennisPartDbContext))]
    [Migration("20190511211707_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TennisPartCore.Models.Classements", b =>
                {
                    b.Property<int>("IdClassement")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Classement")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.HasKey("IdClassement");

                    b.ToTable("Classements");
                });

            modelBuilder.Entity("TennisPartCore.Models.Palmares", b =>
                {
                    b.Property<int>("IdMatch")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EtatJoueur1")
                        .HasColumnType("int");

                    b.Property<int>("EtatJoueur2")
                        .HasColumnType("int");

                    b.Property<string>("IdJoueur1Id")
                        .IsRequired();

                    b.Property<string>("IdJoueur2Id")
                        .IsRequired();

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdMatch");

                    b.HasIndex("IdJoueur1Id");

                    b.HasIndex("IdJoueur2Id");

                    b.ToTable("Palmares");
                });

            modelBuilder.Entity("TennisPartCore.Models.PartieProposes", b =>
                {
                    b.Property<int>("IdPartie")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("HeurePartie")
                        .HasColumnType("datetime");

                    b.Property<int>("IdClassementMaxIdClassement");

                    b.Property<int>("IdClassementMinIdClassement");

                    b.Property<string>("IdJoueurProposantId")
                        .IsRequired();

                    b.Property<string>("LocalisationMatch")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Participation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPartie");

                    b.HasIndex("IdClassementMaxIdClassement");

                    b.HasIndex("IdClassementMinIdClassement");

                    b.HasIndex("IdJoueurProposantId");

                    b.ToTable("PartieProposes");
                });

            modelBuilder.Entity("TennisPartCore.Models.Joueur", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("IdClassement1");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(1000)");

                    b.HasIndex("IdClassement1");

                    b.HasDiscriminator().HasValue("Joueur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TennisPartCore.Models.Palmares", b =>
                {
                    b.HasOne("TennisPartCore.Models.Joueur", "IdJoueur1")
                        .WithMany()
                        .HasForeignKey("IdJoueur1Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisPartCore.Models.Joueur", "IdJoueur2")
                        .WithMany()
                        .HasForeignKey("IdJoueur2Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TennisPartCore.Models.PartieProposes", b =>
                {
                    b.HasOne("TennisPartCore.Models.Classements", "IdClassementMax")
                        .WithMany()
                        .HasForeignKey("IdClassementMaxIdClassement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisPartCore.Models.Classements", "IdClassementMin")
                        .WithMany()
                        .HasForeignKey("IdClassementMinIdClassement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisPartCore.Models.Joueur", "IdJoueurProposant")
                        .WithMany()
                        .HasForeignKey("IdJoueurProposantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TennisPartCore.Models.Joueur", b =>
                {
                    b.HasOne("TennisPartCore.Models.Classements", "IdClassement")
                        .WithMany()
                        .HasForeignKey("IdClassement1");
                });
#pragma warning restore 612, 618
        }
    }
}
